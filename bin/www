#!/usr/bin/env node

/*
|--------------------------------------------------------------------------
| import npm packages
|--------------------------------------------------------------------------
*/
const chalk = require('chalk');
const debug = require('debug')('api:server');
const cron = require('node-cron');

/*
|--------------------------------------------------------------------------
| import node default module
|--------------------------------------------------------------------------
*/
const http = require('http');

/*
|--------------------------------------------------------------------------
| import user define files
|--------------------------------------------------------------------------
*/
const config = require('../configuration/config');
let app = require('../app');

/*
|--------------------------------------------------------------------------
| Normalize a port into a number, string, or false.
|--------------------------------------------------------------------------
*/
const normalizePort = (val) => {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
};

/*
|--------------------------------------------------------------------------
| Event listener for HTTP server "error" event.
|--------------------------------------------------------------------------
*/
const onError = (error) => {
	console.log('+++++ am in error +++++');
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
};

/*
|--------------------------------------------------------------------------
| Event listener for HTTP server "listening" event.
|--------------------------------------------------------------------------
*/
const onListening = () => {
	let addr = server.address();
	let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
	debug('Listening on ' + bind);
};

/*
|--------------------------------------------------------------------------
| bind port with server
|--------------------------------------------------------------------------
*/
const port = normalizePort(config.port);
app.set('port', port);
const server = http.createServer(app);

/*
|--------------------------------------------------------------------------
| Listen on provided port, on all network interfaces.
|--------------------------------------------------------------------------
*/
server.listen(port, async () => {
	console.log(`${chalk.green('[SUCCESS]')} Server is running: ${chalk.underline.blue(`${config.host}:${port}`)}`);
});
server.on('error', onError);
server.on('listening', onListening);

/*
|--------------------------------------------------------------------------
| cron schedule
|--------------------------------------------------------------------------
*/
cron.schedule('* * * * *', () => {});
